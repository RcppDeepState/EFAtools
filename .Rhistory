signed_loadings = TRUE)
# extract second order loadings
L2 <- paf_phi$loadings
# Schmid-Leiman solution, direct loadings of second order factor
L_sls_2 <- L1 %*% L2
# compute uniqueness of higher order factor
u2_h <- sqrt(1 - diag(L2 %*% t(L2)))
# Schmid-Leiman solution, residualized first order factor loadings
L_sls_1 <- L1 %*% diag(u2_h)
# Combine the Schmid-Leiman loadings in a data frame
sl_load <- data.frame(L_sls_2, L_sls_1)
# Compute communalities and uniquenesses of the Schmid-Leiman solution
h2_sl <- rowSums(output^2)
u2_sl <- 1 - h2_sl
# Finalize output object
sl <- cbind(output, h2_sl, u2_sl)
colnames(sl) <- c("g", 1:n_first_fac, "h2", "u2")
output <- list(
sl = sl,
L2 = L2)
class(output) <- "SL"
}
SL(temp_psych_Pr)
SL(temp_psych_Pr)
SL <- function(x, Phi = NULL, cors = TRUE, max_iter = 300, type = "EFAdiff",
init_comm = NULL, criterion = NULL,
criterion_type = NULL, abs_eigen = NULL,
signed_loadings = TRUE) {
if(all(class(x) == "PROMAX") || all(class(x) == c("psych", "fa"))) {
L1 <- x$loadings
n_first_fac <- ncol(x$loadings)
if(!is.null(Phi)){
warning("Phi argument is specified. Specified factor intercorrelations are
taken. To take factor intercorrelations from the given output,
leave Phi = NULL")
} else {
Phi <- x$Phi
}
} else {
L1 <- x
n_first_fac <- ncol(x)
}
# perform a factor analysis on the intercorrelation matrix of the first order
# factors
paf_phi <- PAF(Phi, n_factors = 1, cors = TRUE, max_iter = 300,
type = type, init_comm = init_comm, criterion = criterion,
criterion_type = criterion_type, abs_eigen = abs_eigen,
signed_loadings = TRUE)
# extract second order loadings
L2 <- paf_phi$loadings
# Schmid-Leiman solution, direct loadings of second order factor
L_sls_2 <- L1 %*% L2
# compute uniqueness of higher order factor
u2_h <- sqrt(1 - diag(L2 %*% t(L2)))
# Schmid-Leiman solution, residualized first order factor loadings
L_sls_1 <- L1 %*% diag(u2_h)
# Combine the Schmid-Leiman loadings in a data frame
sl_load <- data.frame(L_sls_2, L_sls_1)
# Compute communalities and uniquenesses of the Schmid-Leiman solution
h2_sl <- rowSums(output^2)
u2_sl <- 1 - h2_sl
# Finalize output object
sl <- cbind(output, h2_sl, u2_sl)
colnames(sl) <- c("g", 1:n_first_fac, "h2", "u2")
output <- list(
sl = sl,
L2 = L2)
class(output) <- "SL"
}
SL(temp_psych_Pr)
n_first_fac
temp_psych_Pr$loadings
temp_psych_Pr$Phi
temp_psych_Pr$loadings
loadings(temp_psych_Pr)
temp_psych_Pr$loadings[1]
temp_psych_Pr$loadings[[1]]
loadings(temp_psych_Pr$loadings)
loadings(temp_psych_Pr$loadings)
temp_psych_Pr
temp_psych_Pr$loadings
dim(temp_psych_Pr$loadings)
dd <- dim(temp_psych_Pr$loadings)
temp_psych_Pr$loadings[1:dd[1], 1:dd[2]]
as.matrix(temp_psych_Pr$loadings)
unlist(temp_psych_Pr$loadings)
unclass(temp_psych_Pr$loadings)
x = temp_psych_Pr
L1 <- unclass(x$loadings)
n_first_fac <- ncol(x$loadings)
L1
n_first_fac
else if(all(class(x) == c("psych", "fa"))) {
L1 <- unclass(x$loadings)
n_first_fac <- ncol(x$loadings)
if(!is.null(Phi)){
warning("Phi argument is specified. Specified factor intercorrelations are
taken. To take factor intercorrelations from the psych fa output,
leave Phi = NULL")
} else {
Phi <- x$Phi
}
} else {
L1 <- x
n_first_fac <- ncol(x)
}
SL <- function(x, Phi = NULL, cors = TRUE, max_iter = 300, type = "EFAdiff",
init_comm = NULL, criterion = NULL,
criterion_type = NULL, abs_eigen = NULL,
signed_loadings = TRUE) {
if(all(class(x) == "PROMAX"))) {
L1 <- x$loadings
n_first_fac <- ncol(x$loadings)
if(!is.null(Phi)){
warning("Phi argument is specified. Specified factor intercorrelations are
taken. To take factor intercorrelations from the PROMAX output,
leave Phi = NULL")
} else {
Phi <- x$Phi
}
}
else if(all(class(x) == c("psych", "fa"))) {
L1 <- unclass(x$loadings)
n_first_fac <- ncol(x$loadings)
if(!is.null(Phi)){
warning("Phi argument is specified. Specified factor intercorrelations are
taken. To take factor intercorrelations from the psych fa output,
leave Phi = NULL")
} else {
Phi <- x$Phi
}
} else {
L1 <- x
n_first_fac <- ncol(x)
}
# perform a factor analysis on the intercorrelation matrix of the first order
# factors
paf_phi <- PAF(Phi, n_factors = 1, cors = TRUE, max_iter = 300,
type = type, init_comm = init_comm, criterion = criterion,
criterion_type = criterion_type, abs_eigen = abs_eigen,
signed_loadings = TRUE)
# extract second order loadings
L2 <- paf_phi$loadings
# Schmid-Leiman solution, direct loadings of second order factor
L_sls_2 <- L1 %*% L2
# compute uniqueness of higher order factor
u2_h <- sqrt(1 - diag(L2 %*% t(L2)))
# Schmid-Leiman solution, residualized first order factor loadings
L_sls_1 <- L1 %*% diag(u2_h)
# Combine the Schmid-Leiman loadings in a data frame
sl_load <- data.frame(L_sls_2, L_sls_1)
# Compute communalities and uniquenesses of the Schmid-Leiman solution
h2_sl <- rowSums(output^2)
u2_sl <- 1 - h2_sl
# Finalize output object
sl <- cbind(output, h2_sl, u2_sl)
colnames(sl) <- c("g", 1:n_first_fac, "h2", "u2")
output <- list(
sl = sl,
L2 = L2)
class(output) <- "SL"
}
SL <- function(x, Phi = NULL, cors = TRUE, max_iter = 300, type = "EFAdiff",
init_comm = NULL, criterion = NULL,
criterion_type = NULL, abs_eigen = NULL,
signed_loadings = TRUE) {
if(all(class(x) == "PROMAX")) {
L1 <- x$loadings
n_first_fac <- ncol(x$loadings)
if(!is.null(Phi)){
warning("Phi argument is specified. Specified factor intercorrelations are
taken. To take factor intercorrelations from the PROMAX output,
leave Phi = NULL")
} else {
Phi <- x$Phi
}
} else if(all(class(x) == c("psych", "fa"))) {
L1 <- unclass(x$loadings)
n_first_fac <- ncol(x$loadings)
if(!is.null(Phi)){
warning("Phi argument is specified. Specified factor intercorrelations are
taken. To take factor intercorrelations from the psych fa output,
leave Phi = NULL")
} else {
Phi <- x$Phi
}
} else {
L1 <- x
n_first_fac <- ncol(x)
}
# perform a factor analysis on the intercorrelation matrix of the first order
# factors
paf_phi <- PAF(Phi, n_factors = 1, cors = TRUE, max_iter = 300,
type = type, init_comm = init_comm, criterion = criterion,
criterion_type = criterion_type, abs_eigen = abs_eigen,
signed_loadings = TRUE)
# extract second order loadings
L2 <- paf_phi$loadings
# Schmid-Leiman solution, direct loadings of second order factor
L_sls_2 <- L1 %*% L2
# compute uniqueness of higher order factor
u2_h <- sqrt(1 - diag(L2 %*% t(L2)))
# Schmid-Leiman solution, residualized first order factor loadings
L_sls_1 <- L1 %*% diag(u2_h)
# Combine the Schmid-Leiman loadings in a data frame
sl_load <- data.frame(L_sls_2, L_sls_1)
# Compute communalities and uniquenesses of the Schmid-Leiman solution
h2_sl <- rowSums(output^2)
u2_sl <- 1 - h2_sl
# Finalize output object
sl <- cbind(output, h2_sl, u2_sl)
colnames(sl) <- c("g", 1:n_first_fac, "h2", "u2")
output <- list(
sl = sl,
L2 = L2)
class(output) <- "SL"
}
SL(temp_psych_Pr)
SL <- function(x, Phi = NULL, cors = TRUE, max_iter = 300, type = "EFAdiff",
init_comm = NULL, criterion = NULL,
criterion_type = NULL, abs_eigen = NULL,
signed_loadings = TRUE) {
if(all(class(x) == "PROMAX")) {
L1 <- x$loadings
n_first_fac <- ncol(x$loadings)
if(!is.null(Phi)){
warning("Phi argument is specified. Specified factor intercorrelations are
taken. To take factor intercorrelations from the PROMAX output,
leave Phi = NULL")
} else {
Phi <- x$Phi
}
} else if(all(class(x) == c("psych", "fa"))) {
L1 <- unclass(x$loadings)
n_first_fac <- ncol(x$loadings)
if(!is.null(Phi)){
warning("Phi argument is specified. Specified factor intercorrelations are
taken. To take factor intercorrelations from the psych fa output,
leave Phi = NULL")
} else {
Phi <- x$Phi
}
} else {
L1 <- x
n_first_fac <- ncol(x)
}
# perform a factor analysis on the intercorrelation matrix of the first order
# factors
paf_phi <- PAF(Phi, n_factors = 1, cors = TRUE, max_iter = 300,
type = type, init_comm = init_comm, criterion = criterion,
criterion_type = criterion_type, abs_eigen = abs_eigen,
signed_loadings = TRUE)
# extract second order loadings
L2 <- paf_phi$loadings
# Schmid-Leiman solution, direct loadings of second order factor
L_sls_2 <- L1 %*% L2
# compute uniqueness of higher order factor
u2_h <- sqrt(1 - diag(L2 %*% t(L2)))
# Schmid-Leiman solution, residualized first order factor loadings
L_sls_1 <- L1 %*% diag(u2_h)
# Combine the Schmid-Leiman loadings in a data frame
sl_load <- data.frame(L_sls_2, L_sls_1)
# Compute communalities and uniquenesses of the Schmid-Leiman solution
h2_sl <- rowSums(output^2)
u2_sl <- 1 - h2_sl
# Finalize output object
sl <- cbind(sl_load, h2_sl, u2_sl)
colnames(sl) <- c("g", 1:n_first_fac, "h2", "u2")
output <- list(
sl = sl,
L2 = L2)
class(output) <- "SL"
}
SL(temp_psych_Pr)
SL <- function(x, Phi = NULL, cors = TRUE, max_iter = 300, type = "EFAdiff",
init_comm = NULL, criterion = NULL,
criterion_type = NULL, abs_eigen = NULL,
signed_loadings = TRUE) {
if(all(class(x) == "PROMAX")) {
L1 <- x$loadings
n_first_fac <- ncol(x$loadings)
if(!is.null(Phi)){
warning("Phi argument is specified. Specified factor intercorrelations are
taken. To take factor intercorrelations from the PROMAX output,
leave Phi = NULL")
} else {
Phi <- x$Phi
}
} else if(all(class(x) == c("psych", "fa"))) {
L1 <- unclass(x$loadings)
n_first_fac <- ncol(x$loadings)
if(!is.null(Phi)){
warning("Phi argument is specified. Specified factor intercorrelations are
taken. To take factor intercorrelations from the psych fa output,
leave Phi = NULL")
} else {
Phi <- x$Phi
}
} else {
L1 <- x
n_first_fac <- ncol(x)
}
# perform a factor analysis on the intercorrelation matrix of the first order
# factors
paf_phi <- PAF(Phi, n_factors = 1, cors = TRUE, max_iter = 300,
type = type, init_comm = init_comm, criterion = criterion,
criterion_type = criterion_type, abs_eigen = abs_eigen,
signed_loadings = TRUE)
# extract second order loadings
L2 <- paf_phi$loadings
# Schmid-Leiman solution, direct loadings of second order factor
L_sls_2 <- L1 %*% L2
# compute uniqueness of higher order factor
u2_h <- sqrt(1 - diag(L2 %*% t(L2)))
# Schmid-Leiman solution, residualized first order factor loadings
L_sls_1 <- L1 %*% diag(u2_h)
# Combine the Schmid-Leiman loadings in a data frame
sl_load <- data.frame(L_sls_2, L_sls_1)
# Compute communalities and uniquenesses of the Schmid-Leiman solution
h2_sl <- rowSums(sl_load^2)
u2_sl <- 1 - h2_sl
# Finalize output object
sl <- cbind(sl_load, h2_sl, u2_sl)
colnames(sl) <- c("g", 1:n_first_fac, "h2", "u2")
output <- list(
sl = sl,
L2 = L2)
class(output) <- "SL"
}
SL(temp_psych_Pr)
z <- SL(temp_psych_Pr)
z
SL <- function(x, Phi = NULL, cors = TRUE, max_iter = 300, type = "EFAdiff",
init_comm = NULL, criterion = NULL,
criterion_type = NULL, abs_eigen = NULL,
signed_loadings = TRUE) {
if(all(class(x) == "PROMAX")) {
L1 <- x$loadings
n_first_fac <- ncol(x$loadings)
if(!is.null(Phi)){
warning("Phi argument is specified. Specified factor intercorrelations are
taken. To take factor intercorrelations from the PROMAX output,
leave Phi = NULL")
} else {
Phi <- x$Phi
}
} else if(all(class(x) == c("psych", "fa"))) {
L1 <- unclass(x$loadings)
n_first_fac <- ncol(x$loadings)
if(!is.null(Phi)){
warning("Phi argument is specified. Specified factor intercorrelations are
taken. To take factor intercorrelations from the psych fa output,
leave Phi = NULL")
} else {
Phi <- x$Phi
}
} else {
L1 <- x
n_first_fac <- ncol(x)
}
# perform a factor analysis on the intercorrelation matrix of the first order
# factors
paf_phi <- PAF(Phi, n_factors = 1, cors = TRUE, max_iter = 300,
type = type, init_comm = init_comm, criterion = criterion,
criterion_type = criterion_type, abs_eigen = abs_eigen,
signed_loadings = TRUE)
# extract second order loadings
L2 <- paf_phi$loadings
# Schmid-Leiman solution, direct loadings of second order factor
L_sls_2 <- L1 %*% L2
# compute uniqueness of higher order factor
u2_h <- sqrt(1 - diag(L2 %*% t(L2)))
# Schmid-Leiman solution, residualized first order factor loadings
L_sls_1 <- L1 %*% diag(u2_h)
# Combine the Schmid-Leiman loadings in a data frame
sl_load <- data.frame(L_sls_2, L_sls_1)
# Compute communalities and uniquenesses of the Schmid-Leiman solution
h2_sl <- rowSums(sl_load^2)
u2_sl <- 1 - h2_sl
# Finalize output object
sl <- cbind(sl_load, h2_sl, u2_sl)
colnames(sl) <- c("g", 1:n_first_fac, "h2", "u2")
output <- list(
sl = sl,
L2 = L2)
class(output) <- "SL"
output
}
z <- SL(temp_psych_Pr)
z
matrix(L_sls_2, L_sls_1)
L_sls_2
L_sls_1
matrix(L_sls_2, L_sls_1)
SL <- function(x, Phi = NULL, type = "EFA_diff", ...) {
if(all(class(x) == "PROMAX")) {
L1 <- x$loadings
n_first_fac <- ncol(x$loadings)
if(!is.null(Phi)){
warning("Phi argument is specified. Specified factor intercorrelations are
taken. To take factor intercorrelations from the PROMAX output,
leave Phi = NULL")
} else {
Phi <- x$Phi
}
} else if(all(class(x) == c("psych", "fa"))) {
L1 <- unclass(x$loadings)
n_first_fac <- ncol(x$loadings)
if(!is.null(Phi)){
warning("Phi argument is specified. Specified factor intercorrelations are
taken. To take factor intercorrelations from the psych fa output,
leave Phi = NULL")
} else {
Phi <- x$Phi
}
} else {
L1 <- x
n_first_fac <- ncol(x)
}
# perform a factor analysis on the intercorrelation matrix of the first order
# factors
paf_phi <- PAF(Phi, n_factors = 1, cors = TRUE, max_iter = 300,
type = type, init_comm = init_comm, criterion = criterion,
criterion_type = criterion_type, abs_eigen = abs_eigen,
signed_loadings = TRUE)
# extract second order loadings
L2 <- paf_phi$loadings
# Schmid-Leiman solution, direct loadings of second order factor
L_sls_2 <- L1 %*% L2
# compute uniqueness of higher order factor
u2_h <- sqrt(1 - diag(L2 %*% t(L2)))
# Schmid-Leiman solution, residualized first order factor loadings
L_sls_1 <- L1 %*% diag(u2_h)
# Combine the Schmid-Leiman loadings in a data frame
sl_load <- cbind(L_sls_2, L_sls_1)
# Compute communalities and uniquenesses of the Schmid-Leiman solution
h2_sl <- rowSums(sl_load^2)
u2_sl <- 1 - h2_sl
# Finalize output object
sl <- cbind(sl_load, h2_sl, u2_sl)
colnames(sl) <- c("g", 1:n_first_fac, "h2", "u2")
output <- list(
sl = sl,
L2 = L2)
class(output) <- "SL"
output
}
z <- SL(temp_psych_Pr)
SL <- function(x, Phi = NULL, type = "EFAdiff", ...) {
if(all(class(x) == "PROMAX")) {
L1 <- x$loadings
n_first_fac <- ncol(x$loadings)
if(!is.null(Phi)){
warning("Phi argument is specified. Specified factor intercorrelations are
taken. To take factor intercorrelations from the PROMAX output,
leave Phi = NULL")
} else {
Phi <- x$Phi
}
} else if(all(class(x) == c("psych", "fa"))) {
L1 <- unclass(x$loadings)
n_first_fac <- ncol(x$loadings)
if(!is.null(Phi)){
warning("Phi argument is specified. Specified factor intercorrelations are
taken. To take factor intercorrelations from the psych fa output,
leave Phi = NULL")
} else {
Phi <- x$Phi
}
} else {
L1 <- x
n_first_fac <- ncol(x)
}
# perform a factor analysis on the intercorrelation matrix of the first order
# factors
paf_phi <- PAF(Phi, n_factors = 1, cors = TRUE, max_iter = 300,
type = type, init_comm = init_comm, criterion = criterion,
criterion_type = criterion_type, abs_eigen = abs_eigen,
signed_loadings = TRUE)
# extract second order loadings
L2 <- paf_phi$loadings
# Schmid-Leiman solution, direct loadings of second order factor
L_sls_2 <- L1 %*% L2
# compute uniqueness of higher order factor
u2_h <- sqrt(1 - diag(L2 %*% t(L2)))
# Schmid-Leiman solution, residualized first order factor loadings
L_sls_1 <- L1 %*% diag(u2_h)
# Combine the Schmid-Leiman loadings in a data frame
sl_load <- cbind(L_sls_2, L_sls_1)
# Compute communalities and uniquenesses of the Schmid-Leiman solution
h2_sl <- rowSums(sl_load^2)
u2_sl <- 1 - h2_sl
# Finalize output object
sl <- cbind(sl_load, h2_sl, u2_sl)
colnames(sl) <- c("g", 1:n_first_fac, "h2", "u2")
output <- list(
sl = sl,
L2 = L2)
class(output) <- "SL"
output
}
z <- SL(temp_psych_Pr)
class(z$sl)
devtools::install_local()
library(devtools)
devtools::install_local()
devtools::install_local()
devtools::install_local()
getwd()
install.packages("devtools")
install.packages("devtools")
devtools::install_local()
